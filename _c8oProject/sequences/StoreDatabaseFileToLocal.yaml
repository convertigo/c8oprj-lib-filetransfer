accessibility: Hidden
responseTimeout: 3600
↓GetNumberOfChunks [steps.SimpleStep-1465458747081]: 
  expression: |
    // Retrieves the number of chunks in the uuid
    var chunkId = -1;
    
↓jIf [steps.IfStep-1465459358643]: 
  condition: numberOfChunks == -1
  ↓Error_structure [steps.XMLErrorStep-1465459382731]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: JS
          - →→: '"The uuid is invalid (" + uuid + ")"'
  ↓Return [steps.ReturnStep-1465459388555]: 
↓jElement1 [steps.ElementStep-1465459579844]: 
  expression: numberOfChunks
  nodeName: debug_numberOfChunks
  output: false
↓jElement2 [steps.ElementStep-1465460127630]: 
  expression: uuid + "_0"
  nodeName: docid
  output: false
↓Call_Transaction2 [steps.TransactionStep-1465460096638]: 
  sourceTransaction: lib_FileTransfer.c8ofiletransfer.GetChunk
  ↓_use_docid [variables.StepVariable-1465460096640]: 
    description: Document ID
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1465460127630
          - java.lang.String: 
            - ↑value: ./text()
↓IfExistThenElse [steps.IfExistStep-1465460376400]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1465460096638
        - java.lang.String: 
          - ↑value: ./document/couchdb_output/error
  ↓Error_structure [steps.XMLErrorStep-1465460376411]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: SOURCE
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1465460096638
            - java.lang.String: 
              - ↑value: ./document/couchdb_output/error/text()
  ↓Return [steps.ReturnStep-1465460383607]: 
↓jSimpleSource1 [steps.SimpleSourceStep-1465460533190]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1465460096638
        - java.lang.String: 
          - ↑value: ./document/couchdb_output/fileName/text()
  variableName: fileName
↓jIf1 [steps.IfStep-1465460877336]: 
  condition: fileName == null
  ↓Error_structure [steps.XMLErrorStep-1465460906361]: 
  ↓Return [steps.ReturnStep-1465460914905]: 
↓Call_Sequence1 [steps.SequenceStep-1465893776894]: 
  sourceSequence: lib_FileTransfer._GetServerFilePath
  ↓uuid [variables.StepVariable-1465893776896]: 
  ↓fileName [variables.StepVariable-1465893776898]: 
↓jSimpleSource [steps.SimpleSourceStep-1465893790125]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1465893776894
        - java.lang.String: 
          - ↑value: ./document/serverDirPath/text()
  variableName: serverDirPath
↓jSimpleSource2 [steps.SimpleSourceStep-1465893805461]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1465893776894
        - java.lang.String: 
          - ↑value: ./document/serverFilePath/text()
  variableName: serverFilePath
↓jElement3 [steps.ElementStep-1465894758560]: 
  expression: serverDirPath
  nodeName: serverDirPath
↓jElement [steps.ElementStep-1465894749985]: 
  expression: serverFilePath
  nodeName: serverFilePath
↓CreateChunksDirAndDestFile2 [steps.SimpleStep-1465460610991]: 
  expression: |
    // The directory in which chunks will be saved
    // var chunksDirPath = context.getProjectDirectory() + "/_data/temp/" + uuid;
    var chunksDir = new java.io.File(serverDirPath);
    chunksDir.mkdirs();
    
    // Creates the destination file
    var destFile = new java.io.File(serverFilePath); //chunksDir, uuid + "_" + fileName);
    // The output stream for writing data to the file
    var destChannel = new java.io.FileOutputStream(destFile).getChannel();
    destChannelPosition = 0;
↓jWhile [steps.WhileStep-1465459758140]: 
  condition: ++chunkId < numberOfChunks
  ↓Sequence_JS [steps.SimpleStep-1465461480338]: 
    expression: |
      var docid = uuid + "_" + chunkId;
      var attpath = serverDirPath + "/" + docid;
  ↓jElement [steps.ElementStep-1465459848941]: 
    expression: docid
    nodeName: docid
    output: false
  ↓jElement1 [steps.ElementStep-1465461054056]: 
    expression: attpath
    nodeName: attpath
    output: false
  ↓Call_Transaction [steps.TransactionStep-1465461159918]: 
    sourceTransaction: lib_FileTransfer.c8ofiletransfer.GetChunkAttachment
    ↓_use_attname [variables.StepVariable-1465461159920]: 
      description: Attachment name
      value: chunk
    ↓_use_docid [variables.StepVariable-1465461159922]: 
      description: Document ID
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1465459848941
            - java.lang.String: 
              - ↑value: ./text()
    ↓_use_attpath [variables.StepVariable-1465461159924]: 
      description: Attachment path | This path is either absolute or relative to Convertigo environment. Relative paths starting with:<br/><br/>• <span class="computer">./</span> are relative to Convertigo workspace,<br/>• <span class="computer">.//</span> are relative to current project folder. <br/><br/>
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1465461054056
            - java.lang.String: 
              - ↑value: ./text()
  ↓AppendChunks [steps.SimpleStep-1465461268128]: 
    expression: |
      // Opens the chunk file
      var chunkFile = new java.io.File(attpath);
      // Retrieves the file as a stream
      var srcChannel = new java.io.FileInputStream(chunkFile).getChannel();
      
      // Writes bytes
      var chunkFileSize = chunkFile.length();
      destChannel.transferFrom(srcChannel, destChannelPosition, chunkFileSize);
      destChannelPosition = destChannelPosition + chunkFileSize;
      
      // Closes the stream
      srcChannel.close();
      
      // Delete the chunk file
      chunkFile.delete();
      
↓CloseDestChannel [steps.SimpleStep-1465308560062]: 
  expression: |
    // Close the FileOutputStream
    destChannel.close();
    
↓Call_Sequence [steps.SequenceStep-1465375997630]: 
  sourceSequence: lib_FileTransfer.DeleteUuid
  ↓uuid [variables.StepVariable-1465375997632]: 
↓Call_Sequence11 [steps.SequenceStep-1473933200548]: 
  sourceSequence: lib_FileTransfer._CheckRemoveExpired
↓uuid [variables.RequestableVariable-1465203563805]: 
↓numberOfChunks [variables.RequestableVariable-1467363085583]: 