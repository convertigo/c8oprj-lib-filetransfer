accessibility: Private
responseTimeout: 3600
↓SplitInChunks [steps.SimpleStep-1437922583467]: 
  expression: |
    '// Retrieves the file
    var filepath = com.twinsoft.convertigo.engine.Engine.theApp.filePropertyManager.getFilepathFromProperty(filepath, context.projectName);
    var file = new java.io.File(filepath);
    var filename = file.getName();
    var fileSize = file.length();
    // The name of the couchDB document
    var fileId = filename;
    
    chunkSize = (chunkSize * 1024 * 1024);
    var chunks = Math.ceil(fileSize / chunkSize);
    
    var uuid = java.util.UUID.randomUUID().toString() + "-" + chunks;
    
    // The directory in which chunks will be saved
    var tempDir = new java.io.File(context.getProjectDirectory() + "/_data/temp/" + uuid + "_" + filename);
    tempDir.mkdirs();
    
    log.debug2("[SplitInChunks] Uuid : " + uuid +
    		"\nFile name : " + filename + 
    		"\nFile path : " + filepath + 
    		"\nFile Size : " + fileSize + 
    		"\nChunk size : " + chunkSize + 
    		"\nNumber of chunks : " + chunks + 
    		"\nChunks directory : " + tempDir.getAbsolutePath());
    
    // Retrieves the file as a stream
    var srcChannel = new java.io.FileInputStream(file).getChannel();
    
    for (var readBytesCounter = 0, chunkId = 0; readBytesCounter < fileSize ; readBytesCounter += chunkSize, chunkId++) {
    	var chunkFile = new java.io.File(tempDir, chunkId);
    	var chunkPath = chunkFile.getAbsolutePath();
    	log.debug2("Chunk ID : " + chunkId + 
    				"\nChunk path : " + chunkPath);
    	
    	// The output stream for writing data to the file
    	var destChannel = new java.io.FileOutputStream(chunkFile).getChannel();
    	// Gets the number of bytes to write
    	var count = readBytesCounter + chunkSize < fileSize ? chunkSize : fileSize - readBytesCounter;
    	// Writes bytes
    	destChannel.transferFrom(srcChannel, 0, count);
    	// Adds the chunk to the array
    	
    	// Close the FileOutputStream
    	destChannel.close();
    }
    srcChannel.close();'
↓uuid [steps.ElementStep-1444742447362]: 
  expression: uuid
  nodeName: uuid
↓jElement1 [steps.ElementStep-1440659133057]: 
  expression: filename
  nodeName: filename
↓jElement2 [steps.ElementStep-1440659138252]: 
  expression: '"" + fileSize'
  nodeName: fileSize
↓jElement3 [steps.ElementStep-1440659150661]: 
  expression: '"" + chunks'
  nodeName: chunks
↓jElement31 [steps.ElementStep-1444743488576]: 
  expression: tempDir.getAbsolutePath()
  nodeName: chunksDirectory
↓filepath [variables.RequestableVariable-1437922541601]: 
↓chunkSize [variables.RequestableVariable-1475056933552]: 
  value: ${lib_FileTransfer.SplitFileInChunks.chunkSize=1}